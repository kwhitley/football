{"version":3,"sources":["/src/server/index.js","/src/server/api.js","/src/server/dropbox.js","/src/server/imager-api.js","/src/server/imager.js"],"names":[],"mappings":"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","file":"","sourcesContent":["require('dotenv').config()\n\n// include other main deps\nimport express from 'express'\nimport bodyParser from 'body-parser'\nimport cookieParser from 'cookie-parser'\nimport compression from 'compression'\nimport path from 'path'\nimport http from 'http'\nimport fs from 'fs'\nimport favicon from 'serve-favicon'\n\nimport api from './api'\nimport imager from './imager-api'\n\n// instantiate express\nconst app = express()\nconst isProduction = process.env.NODE_ENV === 'production'\napp.use(cookieParser())\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: false }))\napp.use(compression())\n\n// static serving from /dist/client\nconst staticPath = path.join(__dirname, `../${isProduction ? 'dist' : '.dist-dev'}/client`)\nconsole.log(`serving static content from ${staticPath}`)\napp.use(express.static(staticPath))\napp.use(favicon(path.join(__dirname, '../src/client/images', 'favicon.ico')))\n\n// add api layers\napp.use('/api', api)\napp.use('/i', imager)\n\nconst serverPort = process.env.PORT || 3000\nconst server = http.createServer(app)\n\nserver.listen(serverPort)\nconsole.log(`Express server @ http://localhost:${serverPort} (${isProduction ? 'production' : 'development'})\\n`)\n","import express from 'express'\nimport globby from 'globby'\nimport { list, download } from './dropbox'\nimport dropboxFs from 'dropbox-fs'\nimport apicache from 'apicache'\n\n// create an express app\nconst app = express()\nconst cache = apicache.middleware\n\n// add a route\napp.get('/tmp', async (req, res) => {\n  const paths = await globby(['/Users/kevinwhitley/Documents/*.*']);\n\n  res.json(paths)\n})\n\napp.get('/env', (req, res) => {\n  res.json(process.env)\n})\n\napp.get('/list', cache('30 seconds'), (req, res) => {\n  list().then((response) => res.json(response))\n})\n\n// export the express app\nexport default app\n","import { Dropbox } from 'dropbox'\nimport fetch from 'isomorphic-fetch'\n\nconst { DROPBOX_ACCESS_TOKEN } = process.env\n\nexport const list = () => {\n  console.log('attempting to use dropbox api')\n  var dbx = new Dropbox({ accessToken: DROPBOX_ACCESS_TOKEN, fetch })\n\n  return dbx\n    .filesListFolder({\n      recursive: true,\n      path: '',\n    })\n    .catch(console.error)\n}\n\nexport const download = (path) => {\n  console.log('attempting to use dropbox api', { path: `rev:${path}` })\n  var dbx = new Dropbox({ accessToken: DROPBOX_ACCESS_TOKEN, fetch })\n\n  return dbx.filesDownload({ path: `rev:${path}` })\n    .then((response) => response.fileBinary)\n    .catch(console.error)\n}\n","import express from 'express'\nimport { getImage } from './imager'\n\nconst app = express()\n\n// single route catches all requests to imager and passes them to worker\napp.get('*.(png|jpg)', (req, res) => {\n  getImage(req.path)\n    .then((image) => {\n      res.type('image/jpeg')\n      res.set('Cache-Control', \"public, max-age=345600\") // 4 days\n      res.set('Expires', new Date(Date.now() + 345600000).toUTCString())\n\n      res.end(image)\n    })\n    .catch((err) => {\n      console.error(err)\n      res.status(500).send(err)\n    })\n})\n\nexport default app\n\n","import fs from 'fs'\nimport sharp from 'sharp'\nimport Path from 'path'\nimport { download } from './dropbox'\n\nconst isProduction = process.env.NODE_ENV === 'production'\n\nexport const getImage = (requestedImagePath) => {\n  return new Promise(async function(resolve, reject) {\n    let decodedPath = decodeURI(requestedImagePath)\n    let optionsSegment = decodedPath.replace(/^.*::(.*)\\.\\w{3,4}$/i, '$1') || ''\n    let revisionId = decodedPath.replace(/.*?(\\w+).*/g, '$1')\n    let options = optionsSegment\n                    .split(',')\n                    .reduce((a, b) => {\n                      let [ key, value ] = b.split('=')\n\n                      if (value === undefined) {\n                        a[key] = true\n                      } else {\n                        let numValue = Number(value)\n\n                        a[key] = isNaN(numValue) ? value : numValue\n                      }\n\n                      return a\n                    }, {})\n\n    // begin: save final output and stream output to response\n    let savefolder = Path.join(__dirname, `../${isProduction ? 'dist' : '.dist-dev'}/client/i`)\n    let savepath = savefolder + requestedImagePath\n    let originalpath = savefolder + '/' + revisionId + '.jpg'\n    let saveoriginal = false\n\n    // ensure folder exists before file stream opening\n    await fs.promises.mkdir(savefolder, { recursive: true }).catch(e => e)\n\n    let image = await fs.promises.readFile(originalpath)\n                        .catch((err) => console.log('loading image from dropbox...'))\n\n    if (!image) {\n      image = await download(revisionId)\n      console.log('loaded.')\n      saveoriginal = true\n    } else {\n      console.log('original image loaded from local content')\n    }\n\n    if (!image) return reject('Image not found in database')\n\n    image = sharp(image).rotate()\n\n    if (saveoriginal) {\n      image.toFile(originalpath)\n    }\n\n    let data = await image\n      .resize({ width: options.width, height: options.height })\n      .jpeg({\n        quality: options.quality || 80,\n      })\n      .toFile(savepath)\n\n    fs.promises.readFile(savepath)\n      .then(resolve)\n      .catch(reject)\n    })\n  })\n})\n"]}