{"version":3,"sources":["/src/server/index.js","/src/server/api.js","/src/server/dropbox.js","/src/server/imager-api.js","/src/server/imager.js"],"names":[],"mappings":"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","file":"","sourcesContent":["require('dotenv').config()\n\n// include other main deps\nimport express from 'express'\nimport bodyParser from 'body-parser'\nimport cookieParser from 'cookie-parser'\nimport compression from 'compression'\nimport path from 'path'\nimport http from 'http'\nimport fs from 'fs'\nimport favicon from 'serve-favicon'\n\nimport api from './api'\nimport imager from './imager-api'\n\n// instantiate express\nconst app = express()\nconst isProduction = process.env.NODE_ENV === 'production'\napp.use(cookieParser())\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: false }))\napp.use(compression())\n\n// static serving from /dist/client\nconst staticPath = path.join(__dirname, `../${isProduction ? 'dist' : '.dist-dev'}/client`)\nconsole.log(`serving static content from ${staticPath}`)\napp.use(express.static(staticPath))\napp.use(favicon(path.join(__dirname, '../src/client/images', 'favicon.ico')))\n\n// add api layers\napp.use('/api', api)\napp.use('/i', imager)\n\nconst serverPort = process.env.PORT || 3000\nconst server = http.createServer(app)\n\nserver.listen(serverPort)\nconsole.log(`Express server @ http://localhost:${serverPort} (${isProduction ? 'production' : 'development'})\\n`)\n","import express from 'express'\nimport globby from 'globby'\nimport { list, download } from './dropbox'\nimport dropboxFs from 'dropbox-fs'\nimport apicache from 'apicache'\n\n// create an express app\nconst app = express()\nconst cache = apicache.middleware\n\n// add a route\napp.get('/tmp', async (req, res) => {\n  const paths = await globby(['/Users/kevinwhitley/Documents/*.*']);\n\n  res.json(paths)\n})\n\napp.get('/env', (req, res) => {\n  res.json(process.env)\n})\n\napp.get('/list', cache('30 seconds'), (req, res) => {\n  list().then((response) => res.json(response))\n})\n\n// export the express app\nexport default app\n","import { Dropbox } from 'dropbox'\nimport fetch from 'isomorphic-fetch'\n\nconst { DROPBOX_ACCESS_TOKEN } = process.env\n\nexport const list = () => {\n  console.log('attempting to use dropbox api')\n  var dbx = new Dropbox({ accessToken: DROPBOX_ACCESS_TOKEN, fetch })\n\n  return dbx\n    .filesListFolder({\n      recursive: true,\n      path: '',\n    })\n    .catch(console.error)\n}\n\nexport const download = (path) => {\n  console.log('attempting to use dropbox api', { path })\n  var dbx = new Dropbox({ accessToken: DROPBOX_ACCESS_TOKEN, fetch })\n\n  return dbx.filesDownload({ path })\n    .then((response) => response.fileBinary)\n    .catch(console.error)\n}\n","import express from 'express'\nimport { getImage } from './imager'\nimport fs from 'fs'\n\nconst app = express()\n\n// single route catches all requests to imager and passes them to worker\napp.get('*.(png|jpg)', (req, res) => {\n  getImage(req.path)\n    .then(({ image, path }) => {\n      res.set('Content-Type', 'image/jpeg')\n      res.set('Cache-Control', \"public, max-age=345600\") // 4 days\n      res.set('Expires', new Date(Date.now() + 345600000).toUTCString())\n\n      let filestream = fs.createWriteStream(path)\n\n      image.stream(function (err, stdout, stderr) {\n        stdout.pipe(res)\n        stdout.pipe(filestream)\n      })\n    })\n    .catch((err) => {\n      console.error(err)\n      res.status(500).send(err)\n    })\n})\n\nexport default app\n\n","import gm from 'gm'\nimport fs from 'fs'\nimport Path from 'path'\nimport { download } from './dropbox'\n\nconst isProduction = process.env.NODE_ENV === 'production'\n\nexport const getImage = (requestedImagePath) => {\n  return new Promise(async function(resolve, reject) {\n    let decodedPath = decodeURI(requestedImagePath)\n    let optionsSegment = decodedPath.replace(/^.*::(.*)\\.\\w{3,4}$/i, '$1') || ''\n    let originalPath = decodedPath.replace(/^(.*)(::.*)(\\.\\w{3,4})$/g, '$1$3')\n    let options = optionsSegment\n                    .split(',')\n                    .reduce((a, b) => {\n                      let [ key, value ] = b.split('=')\n\n                      if (value === undefined) {\n                        a[key] = true\n                      } else {\n                        let numValue = Number(value)\n\n                        a[key] = isNaN(numValue) ? value : numValue\n                      }\n\n                      return a\n                    }, {})\n\n    // begin: save final output and stream output to response\n    let savefolder = Path.join(__dirname, `../${isProduction ? 'dist' : '.dist-dev'}/client`)\n    let savepath = savefolder + '/i' + requestedImagePath\n    let [ fullpath, folder ] = requestedImagePath.match(/(.*)\\/(.*)/) || []\n\n    console.log('IMAGER', {\n      decodedPath,\n      optionsSegment,\n      options,\n      originalPath,\n      folder,\n    })\n\n    if (options.width && options.height) {\n      options.targetRatio = options.width / options.height\n      if (!options.background && !options.fit) {\n        options.crop = true\n      }\n    }\n\n    // ensure folder exists before file stream opening\n    await fs.promises.mkdir(savefolder + '/i' + folder, { recursive: true }).catch(e => e)\n    savefolder = savefolder + '/i' + folder\n\n    let image = await fs.promises.readFile(savefolder + originalPath).catch(console.error)\n\n    if (!image) {\n      image = await download(originalPath)\n      console.log('image file loaded from dropbox')\n\n      console.log(`saving original to ${savefolder + originalPath}...`)\n      fs.promises.writeFile(savefolder + originalPath, image)\n        .then(() => console.log('original file saved to', savefolder + originalPath))\n        .catch(console.error)\n    } else {\n      console.log('image binary loaded from local content', image)\n    }\n\n    if (!image) return reject('Image not found in database')\n\n    console.log('image', image)\n\n    gm(image).autoOrient().toBuffer(function (err, buffer) {\n      console.log('buffer', buffer)\n      gm(buffer).size(async function(err, geometry) {\n        err && console.log('geometry.error', err)\n\n        let gmImage = gm(buffer)\n\n        if (!geometry) {\n          console.error(`Image geometry not found for ${requestedImagePath}`)\n          return reject(`Image geometry not found for ${requestedImagePath}`)\n        }\n\n        let { height, width } = geometry\n\n        if (err) {\n          return reject(err)\n        }\n\n        let actualRatio = width / height\n        console.log('actual aspect ratio', actualRatio)\n        console.log('actual height', height)\n        console.log('actual width', width)\n\n        gmImage.setFormat('jpg')\n\n        // black and white filter\n        if (options.mono) {\n          gmImage.type('GrayScale')\n        }\n\n        // negative filter\n        if (options.negative) {\n          gmImage.negative()\n        }\n\n        if (options.crop) {\n          let rw, rh\n          let center = options.center !== undefined ? parseFloat(options.center, 10) : 0.5\n          console.log('target aspect ratio', options.targetRatio)\n          let tx = 0\n          let ty = 0\n\n          console.log('cropping')\n\n          if (actualRatio > options.targetRatio) {\n            // actual aspect is wider than target aspect\n            // scale to height, leaving excess in horizontal\n            console.log('scaling to height')\n            gmImage.resize(null, options.height)\n            rw = options.height * actualRatio // resizedWidth\n            console.log('resized width', rw)\n            tx = Math.max(0, Math.round(rw * center - options.width / 2))    // prevent clipping on left\n            tx = Math.min(tx, rw - options.width)                           // prevent clipping on right\n          } else {\n            console.log('scaling to width')\n            // scale to width, leaving excess in vertical\n            gmImage.resize(options.width, null)\n            rh = options.width / actualRatio // resizedHeight\n            console.log('resized height', rh)\n            ty = Math.max(0, Math.round(rh * center - options.height / 2))   // prevent clipping on top\n            ty = Math.min(ty, rh - options.height)                          // prevent clipping on bottom\n          }\n\n          console.log('final crop', { height: options.height, width: options.width, tx, ty })\n\n          gmImage.crop(options.width, options.height, tx, ty)//, tx, ty)\n          options.sharpen = options.sharpen || 2\n        } else if (options) {\n          console.log('resizing', options.width, options.height)\n          gmImage.resize(options.width, options.height)\n        }\n\n        // sharpen pass\n        if (options.sharpen) {\n          var sharpenValue = parseInt(options.sharpen, 10)\n          gmImage.sharpen(sharpenValue, sharpenValue / 5)\n        }\n\n        // add black letterboxing for background requests\n        if (options.background) {\n          gmImage\n            .gravity(\"Center\")\n            .background(\"black\")\n            .extent(options.width, options.height)\n\n          options.quality = options.quality || 98 // maximize quality for background renders\n        }\n\n        // quality filter (default = 80)\n        options.quality = options.quality || 90\n        if (options.quality) {\n          gmImage.quality(options.quality)\n        }\n\n        console.log(`saving image fragment to ${savepath}...`)\n        fs.promises.writeFile(savepath, image)\n          .then(() => console.log('image fragment saved to', savepath))\n          .catch(console.error)\n\n        return resolve({\n          image: gmImage,\n          path: savepath\n        })\n      })\n    })\n  })\n})\n"]}